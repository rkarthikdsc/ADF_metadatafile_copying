{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_fifa_source",
						"type": "DatasetReference"
					},
					"name": "newFIFAdata"
				},
				{
					"dataset": {
						"referenceName": "DS_AzureSqlTable_fifa_sink",
						"type": "DatasetReference"
					},
					"name": "ExsistingData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_dataflow_sink",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "CalNewHashValues"
				},
				{
					"name": "CalExistingHashValues"
				},
				{
					"name": "Checkfornewdata"
				},
				{
					"name": "AddsurrogateKey"
				},
				{
					"name": "maxSKey"
				},
				{
					"name": "joinmaxsurrogatekey"
				},
				{
					"name": "CalculateExtracolumns"
				},
				{
					"name": "SelectRelevantColumns"
				}
			],
			"scriptLines": [
				"parameters{",
				"     parameter_ID as string ('ID'),",
				"     parameter_SCD as string ('Club,Wage,Position')",
				"}",
				"source(output(",
				"          ID as string,",
				"          Name as string,",
				"          Age as string,",
				"          Nationality as string,",
				"          Club as string,",
				"          Wage as string,",
				"          PreferredFoot as string,",
				"          Position as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> newFIFAdata",
				"source(output(",
				"          SKey as integer,",
				"          ID as string,",
				"          Name as string,",
				"          Age as string,",
				"          Nationality as string,",
				"          Club as string,",
				"          Wage as string,",
				"          PreferredFoot as string,",
				"          Position as string,",
				"          Active as integer,",
				"          ActiveStartTime as timestamp,",
				"          ActiveEndTime as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ExsistingData",
				"newFIFAdata derive(ID_Hash = md5(byName($parameter_ID)),",
				"          SCD_Hash = md5(byNames(split($parameter_SCD,',')))) ~> CalNewHashValues",
				"ExsistingData derive(ID_Hash = md5(byName($parameter_ID)),",
				"          SCD_Hash = md5(byNames(split($parameter_SCD,',')))) ~> CalExistingHashValues",
				"CalNewHashValues, CalExistingHashValues exists(CalNewHashValues@ID_Hash == CalExistingHashValues@ID_Hash",
				"     && CalNewHashValues@SCD_Hash == CalExistingHashValues@SCD_Hash,",
				"     negate:true,",
				"     broadcast: 'auto')~> Checkfornewdata",
				"Checkfornewdata keyGenerate(output(SKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddsurrogateKey",
				"CalExistingHashValues aggregate(MaxSkey = max(toInteger(byName('SKey')))) ~> maxSKey",
				"AddsurrogateKey, maxSKey join(MaxSkey==SKey||true(),",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinmaxsurrogatekey",
				"joinmaxsurrogatekey derive(SKey = SKey+ iifNull(MaxSkey,0),",
				"          Active = 1,",
				"          ActiveStartTime = currentUTC(),",
				"          ActiveEndTime = toTimestamp(toString(null()))) ~> CalculateExtracolumns",
				"CalculateExtracolumns select(mapColumn(",
				"          each(match(name!='ID_Hash'&&name!='SCD_Hash'&&name!='MaxSkey'))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectRelevantColumns",
				"SelectRelevantColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}