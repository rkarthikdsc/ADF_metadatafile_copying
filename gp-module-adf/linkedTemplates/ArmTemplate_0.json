{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "gp-module-adf"
		},
		"AzureDataLakeStorage_sink_raw_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage_sink_raw'"
		},
		"LS_AzureDataLakeStorage_raw_sink_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'LS_AzureDataLakeStorage_raw_sink'"
		},
		"LS_AzureSqlDatabase_CDC_product_sink_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_AzureSqlDatabase_CDC_product_sink'"
		},
		"LS_AzureSqlDatabase_fifa_sink_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_AzureSqlDatabase_fifa_sink'"
		},
		"LS_AzureSqlDatabase_source_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_AzureSqlDatabase_source'"
		},
		"LS_AzureSqlDatabase_source_config_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_AzureSqlDatabase_source_config'"
		},
		"LS_fifa_adls_source_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'LS_fifa_adls_source'"
		},
		"AzureDataLakeStorage_sink_raw_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adls4gp.dfs.core.windows.net/"
		},
		"LS_AzureDataLakeStorage_raw_sink_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adls4gp.dfs.core.windows.net/"
		},
		"LS_fifa_adls_source_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adls4gp.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage_sink_raw')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage_sink_raw_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage_sink_raw_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AzureDataLakeStorage_raw_sink')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_AzureDataLakeStorage_raw_sink_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('LS_AzureDataLakeStorage_raw_sink_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AzureSqlDatabase_CDC_product_sink')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_AzureSqlDatabase_CDC_product_sink_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AzureSqlDatabase_fifa_sink')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_AzureSqlDatabase_fifa_sink_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AzureSqlDatabase_source')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_AzureSqlDatabase_source_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AzureSqlDatabase_source_config')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_AzureSqlDatabase_source_config_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_fifa_adls_source')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_fifa_adls_source_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('LS_fifa_adls_source_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_AzureSqlTable_fifa_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSqlDatabase_fifa_sink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ID",
						"type": "nvarchar"
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "Age",
						"type": "nvarchar"
					},
					{
						"name": "Nationality",
						"type": "nvarchar"
					},
					{
						"name": "Club",
						"type": "nvarchar"
					},
					{
						"name": "Wage",
						"type": "nvarchar"
					},
					{
						"name": "PreferredFoot",
						"type": "nvarchar"
					},
					{
						"name": "Position",
						"type": "nvarchar"
					},
					{
						"name": "Active",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ActiveStartTime",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "ActiveEndTime",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tbl_FIFAData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureSqlDatabase_fifa_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_AzureSqlTable_meta_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSqlDatabase_source_config",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureSqlDatabase_source_config')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_customer_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_fifa_adls_source",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Customers (1).csv",
						"fileSystem": "dataflowinputs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "Customerslastname",
						"type": "String"
					},
					{
						"name": "Customersfirstname",
						"type": "String"
					},
					{
						"name": "CustomersCountry",
						"type": "String"
					},
					{
						"name": "Customersage",
						"type": "String"
					},
					{
						"name": "Customersgender",
						"type": "String"
					},
					{
						"name": "Customersemail",
						"type": "String"
					},
					{
						"name": "Customersprofession",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_fifa_adls_source')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_dataflow_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_fifa_adls_source",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "validatedata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_fifa_adls_source')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_fifa_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_fifa_adls_source",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Fifa_1.csv",
						"fileSystem": "fifa"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Age",
						"type": "String"
					},
					{
						"name": "Nationality",
						"type": "String"
					},
					{
						"name": "Club",
						"type": "String"
					},
					{
						"name": "Wage",
						"type": "String"
					},
					{
						"name": "PreferredFoot",
						"type": "String"
					},
					{
						"name": "Position",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_fifa_adls_source')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_metadata_sink_raw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_sink_raw",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"PContainerName": {
						"type": "string"
					},
					"PFolderName": {
						"type": "string"
					},
					"PFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().PFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().PFolderName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().PContainerName",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_sink_raw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ds_order_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_fifa_adls_source",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Orders (1).csv",
						"fileSystem": "dataflowinputs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "order_id",
						"type": "String"
					},
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "Store_id",
						"type": "String"
					},
					{
						"name": "Date",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_fifa_adls_source')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ds_payment_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_fifa_adls_source",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Payments (1).csv",
						"fileSystem": "dataflowinputs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "order_id",
						"type": "String"
					},
					{
						"name": "payment_id",
						"type": "String"
					},
					{
						"name": "type",
						"type": "String"
					},
					{
						"name": "descriptions",
						"type": "String"
					},
					{
						"name": "pDate",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Details",
						"type": "String"
					},
					{
						"name": "Total_Invoice",
						"type": "String"
					},
					{
						"name": "Due_Amount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_fifa_adls_source')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_metadata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup_metadata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  [sourceId]\n      ,[sourceSchema]\n      ,[sourceTable]\n      ,[sourceColumns]\n      ,[destinationContainer]\n      ,[destinationFolder]\n      ,[destinationFile]\n  FROM [config].[tbl_data_source]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_AzureSqlTable_meta_source",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach_metadata_tables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup_metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup_metadata').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select @{item().sourceColumns} from @{item().SourceSchema}.@{item().sourceTable}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_AzureSqlTable_meta_source",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_metadata_sink_raw",
											"type": "DatasetReference",
											"parameters": {
												"PContainerName": {
													"value": "@item().destinationContainer",
													"type": "Expression"
												},
												"PFolderName": {
													"value": "@concat(item().destinationFolder,'/',utcnow('yyyy'),'/',utcnow('MM'),'/',utcnow('dd'))",
													"type": "Expression"
												},
												"PFileName": {
													"value": "@item().destinationFile",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Stored procedure insert log details",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[usp_insertlogdetails]",
										"storedProcedureParameters": {
											"billing_Reference_activity_Type": {
												"value": {
													"value": "@activity('Copy data1').output.billingReference.activityType",
													"type": "Expression"
												},
												"type": "String"
											},
											"dataFactory": {
												"value": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												},
												"type": "String"
											},
											"destinationFile": {
												"value": {
													"value": "@item().destinationFile",
													"type": "Expression"
												},
												"type": "String"
											},
											"destinationFolder": {
												"value": {
													"value": "@concat(item().destinationFolder,'/',utcnow('yyyy'),'/',utcnow('MM'),'/',utcnow('dd'))",
													"type": "Expression"
												},
												"type": "String"
											},
											"effective_Integration_Runtime": {
												"value": {
													"value": "@activity('Copy data1').output.effectiveIntegrationRuntime",
													"type": "Expression"
												},
												"type": "String"
											},
											"errors": {
												"value": {
													"value": "@activity('Copy data1').output.errors",
													"type": "Expression"
												},
												"type": "String"
											},
											"execution_Details_sink_type": {
												"value": {
													"value": "@activity('Copy data1').output.executionDetails[0].sink.type",
													"type": "Expression"
												},
												"type": "String"
											},
											"execution_Details_source_type": {
												"value": {
													"value": "@activity('Copy data1').output.executionDetails[0].source.type",
													"type": "Expression"
												},
												"type": "String"
											},
											"execution_Details_status": {
												"value": {
													"value": "@activity('Copy data1').output.executionDetails[0].status",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineRunId": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"rowsCopied": {
												"value": {
													"value": "@activity('Copy data1').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"rowsRead": {
												"value": {
													"value": "@activity('Copy data1').output.rowsRead",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"sourceTable": {
												"value": {
													"value": "@concat(item().SourceSchema,'.',item().sourceTable)",
													"type": "Expression"
												},
												"type": "String"
											},
											"throughPut": {
												"value": {
													"value": "@activity('Copy data1').output.throughput",
													"type": "Expression"
												},
												"type": "Decimal"
											},
											"triggerName": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"triggerTime": {
												"value": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"triggerType": {
												"value": {
													"value": "@pipeline().TriggerType",
													"type": "Expression"
												},
												"type": "String"
											},
											"used_Data_Integration_Units": {
												"value": {
													"value": "@activity('Copy data1').output.executionDetails[0].usedDataIntegrationUnits",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_AzureSqlDatabase_source_config",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "metadata_driven_table"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-19T14:35:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_AzureSqlTable_meta_source')]",
				"[concat(variables('factoryId'), '/datasets/DS_metadata_sink_raw')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureSqlDatabase_source_config')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_metadata_copy_updated')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup_metadata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  [sourceId]\n      ,[sourceSchema]\n      ,[sourceTable]\n      ,[sourceColumns]\n      ,[destinationContainer]\n      ,[destinationFolder]\n      ,[destinationFile]\n  FROM [config].[tbl_data_source]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_AzureSqlTable_meta_source",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach_metadata_tables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup_metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup_metadata').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select @{item().sourceColumns} from @{item().SourceSchema}.@{item().sourceTable}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_AzureSqlTable_meta_source",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_metadata_sink_raw",
											"type": "DatasetReference",
											"parameters": {
												"PContainerName": {
													"value": "@item().destinationContainer",
													"type": "Expression"
												},
												"PFolderName": {
													"value": "@concat(item().destinationFolder,'/',utcnow('yyyy'),'/',utcnow('MM'),'/',utcnow('dd'))",
													"type": "Expression"
												},
												"PFileName": {
													"value": "@item().destinationFile",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Stored procedure insert log details",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[usp_insertlogdetails]",
										"storedProcedureParameters": {
											"billing_Reference_activity_Type": {
												"value": {
													"value": "@activity('Copy data1').output.billingReference.activityType",
													"type": "Expression"
												},
												"type": "String"
											},
											"dataFactory": {
												"value": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												},
												"type": "String"
											},
											"destinationFile": {
												"value": {
													"value": "@item().destinationFile",
													"type": "Expression"
												},
												"type": "String"
											},
											"destinationFolder": {
												"value": {
													"value": "@concat(item().destinationFolder,'/',utcnow('yyyy'),'/',utcnow('MM'),'/',utcnow('dd'))",
													"type": "Expression"
												},
												"type": "String"
											},
											"effective_Integration_Runtime": {
												"value": {
													"value": "@activity('Copy data1').output.effectiveIntegrationRuntime",
													"type": "Expression"
												},
												"type": "String"
											},
											"errors": {
												"value": {
													"value": "@activity('Copy data1').output.errors",
													"type": "Expression"
												},
												"type": "String"
											},
											"execution_Details_sink_type": {
												"value": {
													"value": "@activity('Copy data1').output.executionDetails[0].sink.type",
													"type": "Expression"
												},
												"type": "String"
											},
											"execution_Details_source_type": {
												"value": {
													"value": "@activity('Copy data1').output.executionDetails[0].source.type",
													"type": "Expression"
												},
												"type": "String"
											},
											"execution_Details_status": {
												"value": {
													"value": "@activity('Copy data1').output.executionDetails[0].status",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineRunId": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"rowsCopied": {
												"value": {
													"value": "@activity('Copy data1').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"rowsRead": {
												"value": {
													"value": "@activity('Copy data1').output.rowsRead",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"sourceTable": {
												"value": {
													"value": "@concat(item().SourceSchema,'.',item().sourceTable)",
													"type": "Expression"
												},
												"type": "String"
											},
											"throughPut": {
												"value": {
													"value": "@activity('Copy data1').output.throughput",
													"type": "Expression"
												},
												"type": "Decimal"
											},
											"triggerName": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"triggerTime": {
												"value": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"triggerType": {
												"value": {
													"value": "@pipeline().TriggerType",
													"type": "Expression"
												},
												"type": "String"
											},
											"used_Data_Integration_Units": {
												"value": {
													"value": "@activity('Copy data1').output.executionDetails[0].usedDataIntegrationUnits",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_AzureSqlDatabase_source_config",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "metadata_driven_table"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-19T14:35:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_AzureSqlTable_meta_source')]",
				"[concat(variables('factoryId'), '/datasets/DS_metadata_sink_raw')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureSqlDatabase_source_config')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_fifa_source",
								"type": "DatasetReference"
							},
							"name": "newFIFAdata"
						},
						{
							"dataset": {
								"referenceName": "DS_AzureSqlTable_fifa_sink",
								"type": "DatasetReference"
							},
							"name": "ExsistingData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_dataflow_sink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "CalNewHashValues"
						},
						{
							"name": "CalExistingHashValues"
						},
						{
							"name": "Checkfornewdata"
						},
						{
							"name": "AddsurrogateKey"
						},
						{
							"name": "maxSKey"
						},
						{
							"name": "joinmaxsurrogatekey"
						},
						{
							"name": "CalculateExtracolumns"
						},
						{
							"name": "SelectRelevantColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     parameter_ID as string ('ID'),",
						"     parameter_SCD as string ('Club,Wage,Position')",
						"}",
						"source(output(",
						"          ID as string,",
						"          Name as string,",
						"          Age as string,",
						"          Nationality as string,",
						"          Club as string,",
						"          Wage as string,",
						"          PreferredFoot as string,",
						"          Position as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> newFIFAdata",
						"source(output(",
						"          SKey as integer,",
						"          ID as string,",
						"          Name as string,",
						"          Age as string,",
						"          Nationality as string,",
						"          Club as string,",
						"          Wage as string,",
						"          PreferredFoot as string,",
						"          Position as string,",
						"          Active as integer,",
						"          ActiveStartTime as timestamp,",
						"          ActiveEndTime as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ExsistingData",
						"newFIFAdata derive(ID_Hash = md5(byName($parameter_ID)),",
						"          SCD_Hash = md5(byNames(split($parameter_SCD,',')))) ~> CalNewHashValues",
						"ExsistingData derive(ID_Hash = md5(byName($parameter_ID)),",
						"          SCD_Hash = md5(byNames(split($parameter_SCD,',')))) ~> CalExistingHashValues",
						"CalNewHashValues, CalExistingHashValues exists(CalNewHashValues@ID_Hash == CalExistingHashValues@ID_Hash",
						"     && CalNewHashValues@SCD_Hash == CalExistingHashValues@SCD_Hash,",
						"     negate:true,",
						"     broadcast: 'auto')~> Checkfornewdata",
						"Checkfornewdata keyGenerate(output(SKey as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> AddsurrogateKey",
						"CalExistingHashValues aggregate(MaxSkey = max(toInteger(byName('SKey')))) ~> maxSKey",
						"AddsurrogateKey, maxSKey join(MaxSkey==SKey||true(),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinmaxsurrogatekey",
						"joinmaxsurrogatekey derive(SKey = SKey+ iifNull(MaxSkey,0),",
						"          Active = 1,",
						"          ActiveStartTime = currentUTC(),",
						"          ActiveEndTime = toTimestamp(toString(null()))) ~> CalculateExtracolumns",
						"CalculateExtracolumns select(mapColumn(",
						"          each(match(name!='ID_Hash'&&name!='SCD_Hash'&&name!='MaxSkey'))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRelevantColumns",
						"SelectRelevantColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_fifa_source')]",
				"[concat(variables('factoryId'), '/datasets/DS_AzureSqlTable_fifa_sink')]",
				"[concat(variables('factoryId'), '/datasets/DS_dataflow_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/step2c_df_practise')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_customer_source",
								"type": "DatasetReference"
							},
							"name": "CustomerDataSource"
						},
						{
							"dataset": {
								"referenceName": "Ds_payment_source",
								"type": "DatasetReference"
							},
							"name": "PaymentSource"
						},
						{
							"dataset": {
								"referenceName": "Ds_order_source",
								"type": "DatasetReference"
							},
							"name": "OrderSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_dataflow_sink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filteronlynonerrordata"
						},
						{
							"name": "filterCustomerAge"
						},
						{
							"name": "SelectRelevantCustomercolumns"
						},
						{
							"name": "SelectRelevantPaymentColumns"
						},
						{
							"name": "selectRelevantordercolumns"
						},
						{
							"name": "JoinCustomerOrdersources"
						},
						{
							"name": "JoinCustomerOrderandPayment"
						},
						{
							"name": "SelectPaymentDetailsRequiredFields"
						},
						{
							"name": "pivot1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customer_id as string,",
						"          Customerslastname as string,",
						"          Customersfirstname as string,",
						"          CustomersCountry as string,",
						"          Customersage as string,",
						"          Customersgender as string,",
						"          Customersemail as string,",
						"          Customersprofession as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CustomerDataSource",
						"source(output(",
						"          order_id as string,",
						"          payment_id as string,",
						"          type as string,",
						"          descriptions as string,",
						"          pDate as date 'DD/mm/yyyy',",
						"          Status as string,",
						"          Details as string,",
						"          Total_Invoice as short,",
						"          Due_Amount as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PaymentSource",
						"source(output(",
						"          order_id as string,",
						"          customer_id as string,",
						"          Store_id as string,",
						"          Date as date 'DD/mm/yyyy'",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> OrderSource",
						"PaymentSource filter(Status !='error' && (not(equals(Status,'refunded')))) ~> Filteronlynonerrordata",
						"CustomerDataSource filter(toInteger(Customersage) >=20 && toInteger(Customersage)<71) ~> filterCustomerAge",
						"filterCustomerAge select(mapColumn(",
						"          Customer_id = customer_id,",
						"          Customers_First_Name = Customersfirstname,",
						"          Customers_Last_Name = Customerslastname,",
						"          Customers_Country = CustomersCountry,",
						"          Customers_Age = Customersage",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRelevantCustomercolumns",
						"Filteronlynonerrordata select(mapColumn(",
						"          payment_id,",
						"          order_id,",
						"          Status,",
						"          Due_Amount,",
						"          Total_Invoice",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRelevantPaymentColumns",
						"OrderSource select(mapColumn(",
						"          order_id,",
						"          customer_id,",
						"          Date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectRelevantordercolumns",
						"SelectRelevantCustomercolumns, selectRelevantordercolumns join(SelectRelevantCustomercolumns@Customer_id == selectRelevantordercolumns@customer_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCustomerOrdersources",
						"JoinCustomerOrdersources, SelectRelevantPaymentColumns join(selectRelevantordercolumns@order_id == SelectRelevantPaymentColumns@order_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCustomerOrderandPayment",
						"JoinCustomerOrderandPayment select(mapColumn(",
						"          customer_id = selectRelevantordercolumns@customer_id,",
						"          Date,",
						"          Customers_First_Name,",
						"          Customers_Last_Name,",
						"          Customers_Country,",
						"          Customers_Age,",
						"          Status,",
						"          Total_Invoice,",
						"          Due_Amount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPaymentDetailsRequiredFields",
						"SelectPaymentDetailsRequiredFields pivot(groupBy(customer_id,",
						"          Date,",
						"          Customers_First_Name,",
						"          Customers_Last_Name,",
						"          Customers_Country,",
						"          Customers_Age,",
						"          Total_Invoice),",
						"     pivotBy(Status, ['received', 'not received']),",
						"     Due_Amount_ = sum(Due_Amount),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivot1",
						"pivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Paymentdetails.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_customer_source')]",
				"[concat(variables('factoryId'), '/datasets/Ds_payment_source')]",
				"[concat(variables('factoryId'), '/datasets/Ds_order_source')]",
				"[concat(variables('factoryId'), '/datasets/DS_dataflow_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "step2c_df_practise",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CustomerDataSource": {},
									"PaymentSource": {},
									"OrderSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"PMaxage": {
						"type": "string"
					},
					"PMinage": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-15T09:37:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/step2c_df_practise')]"
			]
		}
	]
}